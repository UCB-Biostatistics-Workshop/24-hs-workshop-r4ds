---
title: Intro and Plotting
author: Sylvia Song
format:
  revealjs:
    smaller: true
    scrollable: false
    html-math-method: mathjax
error: true
echo: true
---

## Learning Goals:

- Get some sense of basic R
- visualize data using ggplot geoms and aesthetics

# Basics {data-background-color=black}

## R Interface

**Bottom left: Console** 
This is where you input code to be processed. 
Numeric output will display in the console.

**Top left: Source** 
a.k.a the code editor a.k.a the script editor. While the **console** is meant to be used interactively, the **source** is a place to store multiple lines of code to develop into a full-fledged analysis.

**Top right: Environment/History/Connections:** 
It is letting you know about the **objects** that we saved in the **Environment**. When we load in a data set, we will also be able to see its object here too.


## R Interface Continue

**Pane 4. Files/Plots/Packages/Help/Viewer**
These tabs are all useful! The file tab is a basic file viewer. What files are in your folder? The Plots tab displays any plots you've created using code executed in the console. The packages tab shows you the R packages installed (as a list) and those loaded are checked off. We will talk more about R packages in the next lab. The Help tab is used to search the help files. The Viewer tab is used to view other types of output (often html output), like the file we created when we knit the R markdown file.

##

- The box contains an expression that will be evaluated by R, followed by the result of evaluating that expression.
```{r}
1 + 2
```
- `3` is the answer
- Ignore the `[1]` for now. 

- R performs operations (called *functions*) on data and values
- These can be composed arbitrarily
```{r}
log(1+4)
paste("The answer is", log(1+4))
```

## How do I...

- typing `?function_name` 
gives you information about what the function does
- Google is your friend. Try "function_name R language" or "how do I X in R?". I also strongly recommend using "tidyverse" in your queries or the name of a tidyverse package (more in a moment) that has related functions
- stackoverflow is your friend. It might take some scrolling, but you will eventually find what you need
- ChatGPT!

## Quadratic Equation {data-background-color=teal}
type: prompt
incremental: true

Solutions to a polynomial equation $ax^2 + bx + c = 0$ are given by
$$x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$$

Figure out how to use R functions and operations for square roots, exponentiation, and multiplication to calculate x given a=3, b=14, c=-5.

```{r, echo=F, eval=F}
(-14 + sqrt(14^2 - 4*3*(-5)))/(2*3)
```

. . . 

- How did this **feel**? What was your emotional reaction when you saw the question?
- What did you **learn**? What did you notice?

## Packages
- The amazing thing about programming is that you are not limited to what is built into the language
- Millions of R users have written their own functions that you can use
- These are bundled together into *packages*
- To use functions that aren't built into the "base" language, you have to tell R to first go download the relevant code, and then to load it in the current session


```{r, eval=F}
install.packages("QuadRoot")
```
```{r}
library(QuadRoot)
QuadRoot(c(3,14,-5))
```

## 
- The `tidyverse` package has a function called `read_csv()` that lets you read csv (comma-separated values) files into R. 
- csv is a common format for data to come in, and it's easy to export csv files from microsoft excel, for instance. 

```{r}
# I have a csv file with sleep data on Github that we can read from the URL 
sleep = read_csv("https://bit.ly/ucb_biostat_data")
```

- This fails because I haven't yet installed and loaded the `tidyverse` package
```{r, eval=F}
install.packages("tidyverse") # go download the package called "tidyverse"- only have to do this once
library("tidyverse") # load the package into the current R session - do this every time you use R and need functions from this package
```
```{r, include=F}
library(tidyverse)
```

```{r, eval=F}
# How to read in data here
sleep = read_csv("https://bit.ly/ucb_biostat_data")
```

- Now there is no error message
- packages only need to be loaded once per R session (session starts when you open R studio, ends when you shut it down)
- once the package is loaded it doesn't need to be loaded again before each function call


# Visualizing Data {data-background-color=black}

## Data analysis workflow
1. Read data into R (done!)
2. Get results, **make plots and figures**

## Getting your data in R
- Getting your data into R is easy. We already saw, for example:

```{r echo = T, results = 'hide', message=FALSE}
sleep = read_csv("https://bit.ly/ucb_biostat_data")
```

- `read_csv()` requires you to tell it where to find the file you want to read in
  - Windows, e.g.: `"C:\Users\me\Desktop\myfile.csv"`
  - Mac, e.g.: `"/Users/me/Desktop/myfile.csv"`
  - Internet, e.g.: `"http://www.mywebsite.com/myfile.csv"`
  
## Looking at data
- `genes` is now a dataset loaded into R. To look at it, just type
```{r}
sleep
```

This is a **data frame**, one of the most powerful features in R (a "tibble" is a kind of data frame).
 - Similar to an Excel spreadsheet.
 - One row ~ one
 instance of some (real-world) object.
 - One column ~ one variable, containing the values for the
 corresponding instances.
 - All the values in one column should be of the same type (a number, a category, text, etc.),  but
 different columns can be of different types.

## The Dataset
```{r}
head(sleep)
```

This dataset consists of collected survey results from 373 individuals. The following data points were collected for each individual:

- Identity information: gender, age, occupation
- Sleep information: sleep duration, quality of sleep (scale from 1-10), sleep disorder
- Other health and lifestyle information: physical activity level (minutes/day), stress level (scale 1-10), BMI category, blood pressure, heart rate, daily steps
- Let's see if we can find anything interesting from this data!

## Scatterplot

Let's say we're curious about the relationship between sleep duration and sleep quality.

- Can we use R to make a plot of these two variables?

:::: {.columns}

::: {.column width="60%"}
```{r, tidy=F, out.height="80%"}
ggplot(sleep) + 
  geom_point(aes(x = sleep_duration, y = quality_of_sleep))
```
:::

::: {.column width="40%"}
- `ggplot(dataset)` says "start a chart with this dataset"
- `+ geom_point(...)` says "put points on this chart"
- `aes(x=x_values y=y_values)` says "map the values in the column `x_values` to the x-axis, and map the values in the column `y_values` to the y-axis" (`aes` is short for *aesthetic*)
:::

::::


## Scatterplot

```{r, tidy=F}
ggplot(sleep) + 
  geom_point(aes(x = sleep_duration, y = quality_of_sleep))
```

- they are used to draw scatter plots that can visualize relationship between two `numerical variables`

::::

## Exercise: comparing expression levels {data-background-color=teal}

Make a scatterplot of `physical_activity_level` vs `sleep_duration` (2 variable in the dataset). The result should look like this:

```{r, tidy=F, echo=F}
ggplot(sleep) + 
  geom_point(aes(x = physical_activity_level, y = sleep_duration))
```

## Linking Colors to Dots
Let's say we're curious about whether sleep disorder is related to physical activity and sleep duration

```{r, tidy=F, echo=F}
ggplot(sleep) + 
  geom_point(aes(x = physical_activity_level, y = sleep_duration, color = sleep_disorder)) +
  theme()
```

- What's going on here? 
 - It is not obvious, but seems like normal people tend to be have all levels of physical activity and sleep duration, but people with insomina tends to have less physical activity and sleep duration.


## Aesthetics
- Aesthetics aren't just for mapping columns to the x- and y-axis
- You can also use them to assign color, for instance

```{r}
ggplot(sleep,aes(x = physical_activity_level, 
                 y = sleep_duration,
                 color = sleep_disorder)) + 
  geom_point()
```

***
- We can also fit a line to the scatter plot with `geom_smooth`
```{r, tidy=F, message=F}
ggplot(sleep, aes(x = physical_activity_level, y = sleep_duration)) +
  geom_point() +
  geom_smooth() 
```

## titles + labels

- We can also add title and customized labels to x and y axis using `labs`
```{r}
ggplot(sleep,aes(x = physical_activity_level, 
                 y = sleep_duration,
                 color = sleep_disorder)) + 
  geom_point() +
  labs(title = "Relationship between phsyical activity level and sleep duration",
        y = "Sleep Duration (h)",
        x = "Physical Activity Level(minutes/day)")

```

## Boxplot
 - We can use box plot to compare the distribution between two groups
 - y variable need to be numerical, x variable need to be categorical
 - middle line in the box is median (50th quantile), up and bottom lines are 75th quantile and 25th quantile
```{r}
ggplot(sleep, aes(x = gender, y = sleep_duration)) + 
  geom_boxplot()
```
## Histogram
 - We can use `geom_histogram` to see the distribution of one numerical variables
 - We can find the majority people in this dataset has heart rate between 65-75
 - binwidth controls the width of bins, this could be adjusted!
```{r}
ggplot(sleep, aes(x = heart_rate))+
  geom_histogram(binwidth = 2)
```

## Bar plot
 - We can use bar plot to visulize the distribution for categorical variables
```{r}
ggplot(sleep, aes(x = sleep_disorder))+
  geom_bar()
```
***
 - We can use `theme` to change the orientation, height, and size of the label
 - `fill` controls the color of the bar
 - `col` controls the color of the line around the bar
 
```{r}
ggplot(sleep,aes(x = sleep_disorder)) + 
  geom_bar(fill = "pink", col = "grey")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 15))
```

## Exercise {data-background-color=white}

Use google or other resources to figure out how to receate this plot in R:
 
 - Which occupation has the least number of people in this dataset?

```
ggplot(sleep, aes()) + 
  ...
```

```{r, echo=F, tidy=F, message=F}
ggplot(sleep,aes(x = occupation)) + 
  geom_bar(fill = "skyblue", col = "white")+
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))+
  labs(title = "Distribution of occupation status",
       x = "Occupation",
       y = "Count (# of people)")
```