---
title: Tabular Data
author: Alejandro Schuler, Emily Hou, Lauren Liao
format:
  revealjs:
    smaller: true
    scrollable: false
    html-math-method: mathjax
error: true
echo: true
---

## Learning goals
- Understand what the `filter()`, `arrange()`, `select()`, and `mutate()` functions do 
- Learn the syntax for the above functions and how to apply them to a dataset
- Practice combining the above functions together to perform multiple manipulations of a dataset

```{r include=FALSE}
## better font size for slides
library(tidyverse)
library(knitr)
library(readr)

hook_output_default <- knitr::knit_hooks$get('output')

truncate_to_lines <- function(x, n) {
   if (!is.null(n)) {
      x = unlist(stringr::str_split(x, '\n'))
      if (length(x) > n) {
         # truncate the output
         x = c(head(x, n), '...\n')
      }
      x = paste(x, collapse = '\n') # paste first n lines together
   }
   x
}
```


## dplyr functions
This section shows the basic data frame functions in the `dplyr` package (part of `tidyverse`). The basic functions are:

- `filter()` picks out *rows* according to specified conditions
- `arrange()` sorts the *rows* by values in some column(s)
- `select()` picks out *columns* according to their names
- `mutate()` creates new *columns*, often based on operations on other columns

## dplyr functions

All work similarly:

- The first argument is a data frame
- The subsequent arguments describe what to do with the data frame, using the variable names (without quotes)
- The result is a new data frame

Together these properties make it easy to chain together multiple simple steps to achieve a complex result. 


## Sleep, health, and lifestyle data
This dataset consists of collected survey results from 373 individuals. The following data points were collected for each individual:

- Identity information: 
  - gender, age, occupation
- Sleep information: 
  - sleep duration (hours), quality of sleep (scale from 1-10), sleep disorder (none, insomnia, sleep apnea)
- Other health and lifestyle information: 
  - physical activity level (minutes/day), stress level (scale 1-10), BMI category (underweight, normal, overweight), blood pressure (systolic/diastolic), heart rate (bpm), daily steps (number of steps walked per day)

--------------------------------------------------------------------------------

## Setting up
**Goal:** We will use the sleep data to answer questions using the four basic functions 

```{r, message=F}
library(tidyverse) #Don't forget to load the tidyverse library!

sleep <- read_csv('https://bit.ly/ucb_biostat_data') #Reading in the data

# Check number of rows
nrow(sleep)

# Look at the first 6 rows 
head(sleep)
```

# Filter rows with filter() {data-background-color=lightblue}

## Filter rows with filter()
- `filter()` lets you filter out rows of a dataset that meet a certain condition

![](http://ohi-science.org/data-science-training/img/rstudio-cheatsheet-filter.png)

*** 
- `filter()` lets you filter out rows of a dataset that meet a certain condition
- It takes two arguments: the dataset and the condition

```{r, message=F}
filter(sleep, sleep_duration < 6)
```

## Comparisons
- `==` and `!=` test for equality and inequality (do not use `=` for equality)
- `>` and `<` test for greater-than and less-than
- `>=` and `<=` are greater-than-or-equal and less-than-or-equal
- These can also be used directly on vectors outside of data frames
```{r}
c(1,5,-22,4) > 0
c("a", "b", "c") == "b"
```

## Equality on strings
- You can use `==` to test whether a string variable matches given text
- But remember to quote the text you want to compare to
```{r}
filter(sleep, occupation == "Teacher")
```

- why doesn't `occupation == Teacher` work?
- why doesn't `occupation == "teacher"` work?

## Filtering on computed values
- The condition can contain computed values

```{r, message=F}
filter(sleep, sleep_duration + quality_of_sleep > 10)
```

- Note that we didn't actually do anything to change the values in the data
- The values in the sleep duration and quality of sleep columns remain the same as before, and no new column was created (stay tuned!)

## Exercise [together] {data-background-color=teal}

- Filter the sleep data to include only individuals with normal BMI

## Logical conjunctions (AND)

- Previously, we only passed one constraint into our `filter()` function. What happens if I am interested in more than one constraint?

```{r}
filter(sleep, quality_of_sleep >=8 & stress_level <= 3)
```

- The ampersand sign ` & ` stands for "AND"

## Logical conjunctions (AND)

- With "AND", for any given row, both constraints must be satisfied in order for that row to appear in your filtered data

. . .
```{r,eval=F}
filter(sleep, quality_of_sleep >=8 & stress_level <= 3)
```
. . .

```{r}
TRUE & FALSE
TRUE & TRUE
FALSE & TRUE
```

*** 


## Logical conjunctions (OR)

```{r}
filter(sleep, occupation == "Teacher" | occupation == "Lawyer")
```

- The pipe sign ` | ` stands for "OR" 

## Logical conjunctions (OR)
- With "OR", for any given row, only one constraint needs to be satisfied in order for that row to appear in your filtered data

```{r}
TRUE | FALSE
TRUE | TRUE
FALSE | FALSE
```


## Negation (NOT)
```{r}
filter(sleep, !(occupation == "Teacher"))
```
- The exclamation point ` ! ` means "NOT", which negates the logical condition
- Sometimes it's easier to say what you *don't* want!

## Exercises: Computed Conditions, Conjunctions {data-background-color=teal}

**Do these two exercises separately**

- Filter the sleep data to keep just the rows where the product of sleep duration and quality of sleep is between 36 and 40.

- How many people with normal BMI have sleep apnea? 


*Tip: Before you start coding, think about how to approach the problem conceptually.*

## Filtering by row number

- Data frames typically don't have a `row_number` column that you can reference, (though this sleep dataset does have a 'Person ID' column to identify each person), but you can invisibly create one for filter to operate on with  `row_number()` 
- This is more useful once you have sorted the data in a particular order, which we will soon see how to do.

```{r}
filter(sleep, row_number() <= 3)
```

# Sort rows with arrange() {data-background-color=lightblue}

## Sort rows with arrange()

- `arrange()` takes a data frame and a column, and sorts the rows by the values in that column (ascending order).

![](https://rstudio-education.github.io/tidyverse-cookbook/images/dplyr-arrange.png)

***
- `arrange()` takes a data frame and a column, and sorts the rows by the values in that column (ascending order).
- Again, the first argument is the data frame and the other arguments tell the function what to do with it
```{r}
arrange(sleep, age)
```

## Descending sort
- Use the desc function to arrange by descending values
```{r}
arrange(sleep, desc(age))
```

## Multisort

- This is useful if there is a tie in sorting by the first column, since the function will break the tie by looking at the second column.

```{r}
arrange(sleep, desc(age), sleep_duration)
```

- How would you further break the tie?

## Exercise: Top 5 Highest Daily Steps {data-background-color=teal}

Use `arrange()` and `filter()` to get the data for the 5 rows with the highest daily steps.

*Tip: Think about the steps conceptually before you start coding.*

# Select columns with select() {data-background-color=lightblue}

## Select columns with select()
- The select function will return a subset of the dataset, using only the requested columns in the order specified.

![](http://ohi-science.org/data-science-training/img/rstudio-cheatsheet-select.png)

***
- The select function will return a subset of the dataset, using only the requested columns in the order specified.
- first argument is a data frame, then list the columns you want to select

```{r}
select(sleep, occupation, sleep_duration)
```

--------------------------------------------------------------------------------

- you can rename columns in the result with the syntax ` new_name = old_name`

```{r}
select(sleep, job = occupation, sleep_duration)
```

## Negation

- `select()` can also be used to select everything **except for** certain columns. You can think of this as removing those columns from the dataset

```{r}
select(sleep, -person_id)
```

- This is more useful in situations with larger datasets

## Exercise: select and filter {data-background-color=teal}

Your classmate wants to see sleep duration only for male software engineers. Use select and filter to produce a dataframe for your classmate that has just two columns: `person_id` and `sleep_duration`.

*Tip: Again, break the problem down into steps conceptually before coding. Then, figure out how to do each step independently before you put them together.*


# Add new variables with mutate() {data-background-color=lightblue}

## Add new variables with mutate()
- `mutate` creates new columns

![](https://ohi-science.org/data-science-training/img/rstudio-cheatsheet-mutate.png)

***
- `mutate` creates new columns
- first argument is a dataframe, second specifies what you want the new columns to be
```{r, max.lines = 5, eval=F}
mutate(sleep, scaled_stress = 10*stress_level)
```
```{r, echo=F, max.lines = 5}
mutate(sleep, scaled_stress = 10*stress_level) %>% relocate(stress_level, scaled_stress, .before = quality_of_sleep)
```
. . .

- This uses `mutate()` to add a new column to which is 10 times the value of `stress_level`
- To the left of the `=` is a new column name that you want the new column to be called
- To the right of the `=` defines what will go into the new column

***
- **Warning!** If the new variable name already exists, `mutate()` will overwrite the existing one (*in the resulting dataframe that gets created*)

```{r, max.lines = 5, eval=F}
mutate(sleep, stress_level = 10*stress_level)
```
```{r, echo=F}
mutate(sleep, stress_level = 10*stress_level) %>% relocate(stress_level, .before = quality_of_sleep)
```
***
- `mutate()` can create multiple columns at the same time and use multiple columns to define a single new one

```{r, tidy=F, eval=F}
mutate(sleep,  # the newlines make it more readable
      scaled_stress = 10*stress_level,
      scaled_quality_sleep = 10*quality_of_sleep,
      scaled_diff = scaled_stress - scaled_quality_sleep
  )
```
```{r, tidy=F, echo=F, max.lines=5}
mutate(sleep,  # the newlines make it more readable
      scaled_stress = 10*stress_level,
      scaled_quality_sleep = 10*quality_of_sleep,
      scaled_diff = scaled_stress - scaled_quality_sleep
  ) %>% relocate(scaled_stress, scaled_quality_sleep, scaled_diff, .after = age)
```
- Notice we used two columns simultaneously to create a new column




## Indicators

::::{.columns}
:::{.column}
- `mutate()` can be used to make logical columns (indicators)
```{r, tidy=F}
sleep_wdisorder <- mutate(sleep, has_sleep_disorder = !(sleep_disorder == "None"))
select(sleep_wdisorder, 
       has_sleep_disorder, sleep_disorder)
```

:::
:::{.column}
- which can be used to make plots
```{r, tidy=F}
ggplot(sleep_wdisorder,
       aes(x=has_sleep_disorder)) +
  geom_bar()
```

:::
::::

## Exercise: mutate() {data-background-color=teal}

*Tip: Before writing code for each problem, break the problem into steps. Do you have to create new columns? Filter rows? Arrange rows? Select columns? In what order? Once you have a plan, write code, one step at a time.*


**Problem 1** 

I want to look at a single value that describes an individual's sleep. Create a new variable named `sleep_overall` that is the sum of sleep_duration and quality_of_sleep. 

**Problem 2** 

Produce a plot showing the number of people with stress level greater than or equal to 5, and the number of people with stress level less than 5.

# Appendix {data-background-color=lightblue}

## Type conversion using `mutate()`

- Data is sometimes given to you in a form that makes it difficult to do operations on. If we have numerical data that is stored as text, we cannot do any mathematical operations on that data.

```{r}
df <- tibble(number = c("1", "2", "3"))
df

mutate(df, number_plus_1 = number + 1)
```


---------------------------------------
- In this situation, we can use `mutate()` to convert data types, in this case text to numbers. After the conversion, we will be able to perform mathematical operations as normal.

```{r}
mutate(df, number = as.numeric(number))
```

# Piping {data-background-color=lightblue}

## Nesting and Temporary Variables

- In a previous exercise, we used `arrange()` and `filter()` to get the data for the 5 rows with the highest daily steps. One way to do this is to use temporary variables to keep our code clean. 

```{r}
sleep_by_steps <- arrange(sleep, desc(daily_steps)) # using a temporary variable
filter(sleep_by_steps, row_number()<=5)
```

---------------------------------------

- We can also accomplish this by "nesting" the function calls:

```{r}
filter(arrange(sleep, 
               desc(daily_steps)),
       row_number()<=5) # "nesting" the calls to filter and arrange
```

- Which do you prefer? Why? What are the stylistic pros and cons to both if you are trying to understand what the code does for the first time? 

Using temporary variables can make it easier to see each step, but can also be clunky to constantly need to define and keep track of new temporary variables.


## The pipe

R solves these problems with the "pipe" operator `|>`

```{r, eval=F, tidy=F}
sleep |> 
  arrange(desc(daily_steps)) |>
  filter(row_number()<=5)
```

. . . 

How does this compare with our code before? What do you notice? 

- Each step is clearly listed out without the need to define temporary variables.

```{r, eval=F, tidy=F}
sleep_by_steps <- arrange(sleep, desc(daily_steps)) # using a temporary variable

filter(sleep_by_steps, row_number()<=5)
```


## Pipe syntax

When `dataframe1` is piped into `fun(x)` (`fun` is just some fake function)

```{r eval=FALSE}
dataframe1 |> fun(x)
```

is converted into:

```{r eval=FALSE}
fun(dataframe1, x)
```

- That is: the object being piped in is used as the _first_ argument of `fun`.
- The tidyverse functions are consistently designed so that the first argument is a data frame, and the result is a data frame, so you can push a data frame all the way through a series of functions

*** 

- The pipe represents a "conveyor belt" along which data is passed from function to function ("workers") in an assembly line

```{r, eval=F, tidy=F}
sleep |> 
  arrange(desc(daily_steps)) |>
  filter(row_number()<=5)

# same as:
#   arrange(sleep, desc(daily_steps)) |>
#   filter(row_number()<=5)


# same as:
#   filter( arrange(sleep, desc(daily_steps)), row_number()<=5)
```

*** 
- The pipe works for all variables and functions (not just tidyverse functions)

Piping a string
```{r}
# paste("hello", "world")
"hello" |> paste("world") 
```

Piping a vector

```{r}
# sum(c(1,44,21,0,-4))
c(1,44,21,0,-4) |> sum()
```

Piping a data frame

```{r, max.lines=5}
# filter(sleep, age == 28)
sleep |> filter(age == 28) 
```


## Two Pipes

**History**

- R had no pipe
- ~2014: introduced by `magrittr` package (as `%>%`)
- ~2016: tidyverse adoption, proliferated in code
- ~2021: base language adopted idea, implemented native pipe `|>`


- `%>%` and `|>` are (basically) the same
- You will see both in the wild


```{r, max.lines=5, eval=F}
filter(sleep, age == 28)
sleep |> filter(age == 28) 
sleep %>% filter(age == 28) 
```


## Exercise: Pipe to ggplot {data-background-color=teal}

- Run this code to see what it does. Then rewrite it using the pipe operator (get rid of the intermediate variables `sleep_lawyer` and `outliers`) and get it to produce the same output.

```{r, eval=F, tidy=F}
sleep_lawyer <- filter(sleep, occupation == 'Lawyer')

outliers <- mutate(sleep_lawyer, sleep_outlier = heart_rate > 70) 

ggplot(outliers) +
  geom_bar(aes(x=sleep_outlier))
```

## Exercise: Solution {data-background-color=teal}

Here is the solution to the previous exercise:

```{r, eval=F, tidy=F}

sleep %>% 
  filter(occupation == "Lawyer") %>% 
  mutate(sleep_outlier = heart_rate > 70)

```

## Exercise: Solution {data-background-color=teal}
With the pipe syntax, you can easily feed it into a `ggplot()` to make beautiful graphs!

```{r}
sleep %>% 
  filter(occupation == "Lawyer") %>% 
  mutate(sleep_outlier = heart_rate > 70) %>% 
  ggplot() + 
  geom_bar(aes(x=sleep_outlier))
```


