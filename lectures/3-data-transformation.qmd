---
title: Tabular Data
author: Alejandro Schuler
format:
  revealjs:
    smaller: true
    scrollable: false
    html-math-method: mathjax
error: true
echo: true
---

## Learning Goals
- filter rows of a dataset based on conditions
- arrange rows of a dataset based on one or more columns
- select columns of a dataset
- mutate existing columns to create new columns
- use the pipe to combine multiple operations

```{r include=FALSE}
## better font size for slides
library(tidyverse)
library(knitr)

hook_output_default <- knitr::knit_hooks$get('output')

truncate_to_lines <- function(x, n) {
   if (!is.null(n)) {
      x = unlist(stringr::str_split(x, '\n'))
      if (length(x) > n) {
         # truncate the output
         x = c(head(x, n), '...\n')
      }
      x = paste(x, collapse = '\n') # paste first n lines together
   }
   x
}
```


## dplyr functions
This section shows the basic data frame functions in the `dplyr` package (part of `tidyverse`). The basic functions are:

- `filter()` picks out rows according to specified conditions
- `arrange()` sorts the row by values in some column(s)
- `select()` picks out columns according to their names
- `mutate()` creates new columns, often based on operations on other columns

All work similarly:

1. The first argument is a data frame.
2. The subsequent arguments describe what to do with the data frame, using the variable names (without quotes).
3. The result is a new data frame.

Together these properties make it easy to chain together multiple simple steps to achieve a complex result. 

***

Later we will also learn

- `summarize()` collapses many values in one or more columns down to one value per column

and `group_by()` which changes the scope of each function from operating on the entire dataset to operating on it group-by-group. 

## GTEx data
This is a subset of the Genotype Tissue Expression (GTEx) dataset

- **The full dataset.** Includes gene expression data, measured via RNA-sequencing, from 54 post-mortem tissues in ~800 individuals. Whole genome sequencing is also available for these individuals as part of the GTEx v8 release, available through dbGaP. 
- **The subsetted dataset.** We are looking at expression data for just 78 individuals here, in four tissues including blood, heart, lung and liver. 
- **Data processing** The expression values have been normalized and corrected for technical covariates and are now in the form of "Z-scores", which indicate the distance of a given expression value from the mean across all measurements of that gene in that tissue. 
- **Goal.** We will use the data here to illustrate different functions for data transformation, often focused on extracting individuals with extremely high or low expression values for a given gene as compared to the distribution across all samples.


**NOTE**: If copying the code, make sure there are no spaces in the download link (where it wraps to a new line).
```{r, message=F}
# Read subsetted data from online file - make sure there are no spaces
gtex = read_tsv('https://tinyurl.com/342rhdc2')

# Check number of rows
nrow(gtex)
```

Filter rows with filter()
====
type: section

Filter rows with filter()
========================================================
- `filter()` lets you filter out rows of a dataset that meet a certain condition

![](http://ohi-science.org/data-science-training/img/rstudio-cheatsheet-filter.png)

Filter rows with filter()
========================================================
- `filter()` lets you filter out rows of a dataset that meet a certain condition
- It takes two arguments: the dataset and the condition

```{r, message=F}
filter(gtex, Blood >= 12)
```

Comparison operators
=========================================================
- `==` and `!=` test for equality and inequality (do not use `=` for equality)
- `>` and `<` test for greater-than and less-than
- `>=` and `<=` are greater-than-or-equal and less-than-or-equal
- these can also be used directly on vectors outside of data frames
```{r}
c(1,5,-22,4) > 0
```

Comparing to NA
===
- A common "gotcha" is that  `==`  cannot be used to compare to `NA`:
```{r}
x = NA
x == NA
```
- The result actually makes sense though, because I'm asking if "I don't know" is the same as "I don't know". Since either side could be any value, the right answer is "I don't know".
- To check if something is `NA`, use `is.na()`
```{r}
x = NA
is.na(x)
```

Equality on Strings
===
- you can use `==` to test whether a string variable matches given text
- but remember to quote the text you want to compare to
```{r}
filter(gtex, Gene == "ZZZ3")
```
- why doesn't `Gene == ZZZ3` work?
- why doesn't `"Gene" == "ZZZ3"` make sense?

Filtering on computed values
========================================================
- the condition can contain computed values

```{r, message=F}
filter(gtex, exp(Blood) > 1)
```
- note that we didn't actually do anything to the values in the blood column


Filtering out all rows
=========================================================
```{r}
filter(gtex, Blood > 10000)
```
- If you ever get a data frame of length zero, it's because no rows satisfy the condition you asked for


Exercise [together]
========================================================
type:prompt

- What is the result of running this code?

```{r}
nrow(gtex)
```

```{r, eval=F}
filter(gtex, Gene == "ZZZ3")
filter(gtex, Heart <= -5)
nrow(gtex)
```


Exercise
========================================================
type:prompt

- Without using the internet, think of how you can use `filter` multiple times to create a dataset
where blood expression is positive (>0) **and** heart expression is negative (<0)

- Using any resources you like, figure out how to use `filter` to create a dataset
where **either** blood expression is positive (>0) **or** heart expression is negative (<0)

Logical conjunctions (AND)
========================================================
```{r}
filter(gtex, Blood <= -5 & Heart <= -5)
```
- This filters by the **conjunction** of the two constraints---both must be satisfied.
- The ampersand sign ` & ` stands for "AND"

```{r}
filter(gtex, Blood <= -5, Heart <= -5)
```
- For filter, you can do "AND" by passing in two separate conditions as two different arguments, but the comma and ampersand are not generally interchangeable

Logical conjunctions (OR)
=========================================================
```{r}
filter(gtex, Gene == "A2ML1" | Gene == "A4GALT")
```
- The pipe sign ` | ` stands for "OR" 
- Multiple conjunctions can describe complex logical conditions

Logical conjunctions (OR)
=========================================================
```{r}
filter(gtex, Gene %in% c("ZZZ3","A2ML1")) 
# equivalent to 
# filter(gtex, Gene=="ZZZ3" | Gene=="A2ML1")
```
- ` %in% ` returns true for all elements of the thing on the left that are also elements of the thing on the right. This is actually shorthand for a match function (use `help('%in%')` to learn more)

Negation (NOT)
=========================================================
```{r}
filter(gtex, !(Gene=="A2ML1"))
```
- The exclamation point ` ! ` means "NOT", which negates the logical condition
- sometimes it's easier to say what you *don't* want!

Exercises: computed conditions, conjunctions, NAs
==========================================================
type: prompt

**Do each of these three exercises separately**

- Filter the GTEX data to keep just the rows where the product of Blood and Heart expression is between 0 and 1.


- Excluding the gene `LAMP3`, does the individual `GTEX-11TT1` have any genes with expression level greater than 4 in their blood?


- Filter out any rows where the value for `Heart` is missing (value is `NA`) 


Sampling rows
==========================================================
- You can use `slice_sample()` to get `n` randomly selected rows if you don't have a particular condition you would like to filter on.

```{r}
slice_sample(gtex, n=5)
```

- the named argument `prop` allows you to sample a proportion of rows
- Do `?slice_sample()` to see how you can sample with replacement or with weights

Filtering by row number
==========================================================

- Use `row_number()` to filter specific rows. This is more useful once you have sorted the data in a particular order, which we will soon see how to do.

```{r}
filter(gtex, row_number()<=3)
```

Sort rows by a column with arrange()
===
type:section

Arrange rows with arrange()
===========================================================
- `arrange()` takes a data frame and a column, and sorts the rows by the values in that column (ascending order).

![](https://rstudio-education.github.io/tidyverse-cookbook/images/dplyr-arrange.png)

Arrange rows with arrange()
===========================================================
- `arrange()` takes a data frame and a column, and sorts the rows by the values in that column (ascending order).
- Again, the first argument is the data frame and the other arguments tell the function what to do with it
```{r}
arrange(gtex, Blood)
```

Arrange can sort by more than one column
===========================================================
- This is useful if there is a tie in sorting by the first column.

```{r}
arrange(gtex, Gene, Blood)
```


Use the desc function to arrange by descending values
===========================================================

```{r}
arrange(gtex, desc(Blood))
```

Exercise: top 5 high expression instances
===========================================================
type:prompt

Use `arrange()` and `filter()` to get the data for the 5 rows with the highest expression values in blood

Exercise: top 5 high expression instances
===========================================================
type:prompt

Use `arrange()` and `filter()` to get the data for the 5 rows with the highest expression values in blood

```{r}
filter(arrange(gtex, desc(Blood)), row_number()<=5) # "nesting" the calls to filter and arrange
```
or
```{r}
gtex_by_blood = arrange(gtex, desc(Blood)) # using a temporary variable
filter(gtex_by_blood, row_number()<=5)
```

- what happens if we reverse the order in which we did `filter` and `arrange`? Does it still work?


Piping
===
type:section

Why pipe?
===

- In our last exercise, we used a number of different function applications to arrive at our answer. Shown below, we used temporary variables to keep our code clean. 
```{r}
gtex_by_blood = arrange(gtex, desc(Blood)) # using a temporary variable
filter(gtex_by_blood, row_number()<=5)
```

- we can also accompish this by "nesting" the function calls:
```{r}
filter(arrange(gtex, desc(Blood)), row_number()<=5) # "nesting" the calls to filter and arrange
```

- Which do you prefer? Why? What are the sylistic pros and cons to both if you are trying to understand what the code does for the first time?

The pipe operator
===

- R solves these problems with the "pipe" operator `|>`

```{r, eval=F, tidy=F}
gtex |> 
  arrange(desc(Blood)) |>
  filter(row_number()<=5)
```


The pipe operator
===

- Tidyverse solves these problems with the pipe operator `|>`

```{r, eval=F, tidy=F}
gtex |> 
  arrange(desc(Blood)) |>
  filter(row_number()<=5)
```

- How does this compare with our code before? What do you notice?

```{r, eval=F, tidy=F}
gtex_by_blood = arrange(gtex, desc(Blood)) # using a temporary variable
filter(gtex_by_blood, row_number()<=5)
```


Pipe details: What happens to an object when it gets "piped in"?
=================================================================

When `df1` is piped into `fun(x)` (`fun` is just some fake function)

```{r eval=FALSE}
df1 |> fun(x)
```

is converted into:

```{r eval=FALSE}
fun(df1, x)
```

- That is: the thing being piped in is used as the _first_ argument of `fun`.
- The tidyverse functions are consistently designed so that the first argument is a data frame, and the result is a data frame, so you can push a dataframe all the way through a series of functions

Pipe details: What objects can be piped?
=================================================================
- The pipe works for all variables and functions (not just tidyverse functions)

Piping a string
```{r}
# paste("hello", "world")
"hello" |> paste("world") 
```

Piping a vector

```{r}
# sum(c(1,44,21,0,-4))
c(1,44,21,0,-4) |> sum()
```

Piping a data frame

```{r, max.lines=5}
# filter(gtex, Gene=="ZZZ3")
gtex |> filter(Gene=="ZZZ3") 
```

An assembly line
===
```{r, eval=F, tidy=F}
gtex |> 
  arrange(desc(Blood)) |>
  filter(row_number()<=5)

# same as:
#   arrange(gtex, desc(Blood)) |>
#   filter(row_number()<=5)


# same as:
#   filter( arrange(gtex, desc(Blood)), row_number()<=5)
```

- The pipe represents a "conveyor belt" along which data is passed from function to function ("workers") in an assembly line

Two Pipes
===

**History**
- R had no pipe
- ~2014: introduced by `magrittr` package (as `%>%`)
- ~2016: tidyverse adoption, proliferated in code
- ~2021: base language adopted idea, implemented native pipe `|>`


- `%>%` and `|>` are (basically) the same
- you will see both in the wild


```{r, max.lines=5, eval=F}
filter(gtex, Gene=="ZZZ3")
gtex |> filter(Gene=="ZZZ3") 
gtex %>% filter(Gene=="ZZZ3") 
```

Exercise: Pipe to ggplot
===
type:prompt

- Run this code to see what it does. Then rewrite it using the pipe operator (get rid of the intermediate variables `mybl2` and `outliers`) and get it to produce the same output.

```{r, eval=F, tidy=F}
mybl2 = filter(gtex, Gene == 'MYBL2')

# we haven't learned about this function yet, but doesn't matter
outliers = mutate(mybl2, blood_outlier = abs(Blood) > 2) 

ggplot(outliers) +
  geom_bar(aes(x=blood_outlier))
```


Select columns with select()
===
type:section

Select columns with select()
=========================================================
- The select function will return a subset of the tibble, using only the requested columns in the order specified.

![](http://ohi-science.org/data-science-training/img/rstudio-cheatsheet-select.png)

Select columns with select()
=========================================================
- The select function will return a subset of the tibble, using only the requested columns in the order specified.
- first argument is a data frame, then columns you want to select

```{r}
gtex |>
  select(Gene, Ind, expression=Blood)
```

- you can rename columns in the result with the syntax ` new_name = old_name`

Select columns with select()
=========================================================
- `select()` can also be used with handy helpers like `starts_with()` and `contains()`

```{r}
gtex |>
  select(starts_with("L"))
```
- Use `?select` to see all the possibilities

***

```{r}
gtex |>
  select(contains("N"))
```
- The quotes around the letter `"N"` make it a string. If we did not do this, `R` would think it was looking for a variable called `N` and not just the plain letter.
- We don't have to quote the names of columns (like `Ind`) because the `tidyverse` functions know that we are working within the dataframe and thus treat the column names like they are variables in their own right

select() subsets columns by name
=========================================================
- `select()` can also be used to select everything **except for** certain columns
```{r}
gtex |>
  select(-starts_with("L"), -Ind)
```

***

- or even to select only columns that match a certain condition

```{r}
gtex |>
  select(where(is.numeric))
```

Exercise: select and filter
===
type:prompt

A colleague wants to see the blood expression for the gene A2ML1 for each person. Use select and filter to produce a dataframe for her that has just two columns: `individual` and `expression`, where the expression values are the blood expression values for each person for the gene A2ML1.

Before writing any code, break the problem down conceptually into steps. Figure out how to do each step independently before you put them together.

pull() is a friend of select()
=========================================================
- `select()` has a friend called `pull()` which returns a vector instead of a (one-column) data frame

![](https://www.gastonsanchez.com/intro2cwd/images/eda/dplyr-extract-column.svg)

```{r max.lines = 3}
# same as gtex$Gene, but pipeable! eg. gtex |> .... |> pull(some_col) 
gtex |> pull(Gene)
```

***

```{r}
gtex |> select(Gene)
```




Rename column names with rename()
=========================================================
- `select()` can be used to rename variables, but it drops all variables not selected
```{r max.lines = 6}
gtex |> select(individual = Ind)
```

- `rename()` is better suited for this because it keeps all the columns
```{r max.lines = 6}
gtex |> rename(individual = Ind)
```

Note: `mutate()`, can also change a column name (more on `mutate()` soon)


Add new variables with mutate()
===
type:section

Add new variables with mutate()
================================================================
- `mutate` creates new columns

![](https://ohi-science.org/data-science-training/img/rstudio-cheatsheet-mutate.png)

Add new variables with mutate()
================================================================
- `mutate` creates new columns
- first argument is a dataframe, second specifies what you want the new columns to be
```{r, max.lines = 5}
gtex |>
  mutate(abs_blood = abs(Blood))
```
- This uses `mutate()` to add a new column to which is the absolute value of `Blood`.
- The thing on the left of the `=` is a new name that you make up which you would like the new column to be called
- The expression on the right of the `=` defines what will go into the new column
- **Warning!** If the new variable name already exists, `mutate()` will overwrite the existing one
```{r, max.lines = 5}
gtex |>
  mutate(Blood = Blood *1000)
```

mutate() can create multiple new columns at once
================================================================
- `mutate()` can create multiple columns at the same time and use multiple columns to define a single new one

```{r, tidy=F}
gtex |>
  mutate(  # the newlines make it more readable
      abs_blood = abs(Blood),
      abs_heart = abs(Heart),
      blood_heart_dif = abs_blood - abs_heart
  )
```
- Note that we have also used two columns simultaneously (`Blood` and `Heart`) to create a new column)

mutate() for data type conversion
===
- Data is sometimes given to you in a form that makes it difficult to do operations on
```{r}
df = tibble(number = c("1", "2", "3"))
df
df |> mutate(number_plus_1 = number + 1)
```

- `mutate()` is also useful for converting data types, in this case text to numbers
```{r}
df |> mutate(number = as.numeric(number))
```


Exercise: mutate()
===
type:prompt

**Problem 1** 

I want to see if certain genes are generally more highly expressed in certain individuals, irrespective of tissue type. 

Using the GTEX data, create a new column containing the sum of the four expression measurements in the different tissues.

**Problem 2** 

Filter `gtex` to only include measurements of the MYL1 gene.

Then, use mutate to mark which individuals have greater than average (positive) expression in liver tissue.

Finally, produce a plot showing blood vs heart expression and color the liver expression outliers in a different color than the other points.

*** 

Plot for problem 2:
```{r, echo=F, fig.width=15}
gene_data = filter(gtex, Gene == 'MYL1')
myl1 = mutate(gene_data, pos_liver = Liver>0)
ggplot(myl1) +
  geom_point(aes(x=Blood, y=Heart, color=pos_liver),
             size = 3) +
  theme(axis.text = element_text(size = 15),
        axis.title = element_text(size = 20),
        legend.text = element_text(size = 20),
        legend.title = element_text(size = 20))
```

**Problem 3** 

Produce a vector containing the ten individual IDs (`Ind`) with the biggest absolute difference in their heart and lung expression for the A2ML1 gene.

Before writing code, break the problem into steps. Do you have to create new columns? Filter rows? Arrange rows? Select columns? In what order? Once you have a plan, write code, one step at a time.

mutate() and if_else()
===
- `if_else` is a vectorized if-else statement
- the first argument is an R expression that evaluates to a logical vector, the second argument is what to replace all of the resulting TRUEs with, and the third argument is what to replace the resulting FALSEs with
```{r}
x = c(-1, 1/2, 2/3, 5)
if_else(0<=x & x<=1, "in [0,1]", "not in [0,1]")
```
- this is often used in `mutate()`:
```{r, max.lines=10}
gtex |>
mutate( 
  blood_expression = ifelse(
    Blood < 0, "-", "+"
))
```

mutate() and if_else()
===
- this is useful to "interleave" columns:
```{r, echo=F}
emails = tibble(
  name = c('aya', 'bilal', 'chris', 'diego'),
  school = c('aya@amherst.edu', 'bilal@berkeley.edu', 'chris@cornell.edu', 'diego@duke.edu'),
  personal = c('aya@aol.com', 'bilal@bellsouth.net', 'chris@comcast.com', 'diego@dodo.com.au'),
  preferred = c('school', 'personal', 'personal', 'school')
)
emails
```

```{r}
emails |> 
mutate(,
  preferred_email = ifelse(preferred=='personal', personal, school)
)
```


============================================================
<div align="center">
<img src="https://miro.medium.com/max/1200/1*O4LZwd_rTEGY2zMyDkvR9A.png"; style="max-width:1500;"; class="center">
</div>

Source: [Rstudio Cheat Sheets](https://www.google.com/search?client=safari&rls=en&q=data+transformation+with+dplyr+cheat+sheet&ie=UTF-8&oe=UTF-8). Download the [full dplyr cheat sheet here.](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwiP_KO4m9_xAhVYOs0KHfRUCfgQFnoECAQQAA&url=https%3A%2F%2Fraw.githubusercontent.com%2Frstudio%2Fcheatsheets%2Fmaster%2Fdata-transformation.pdf&usg=AOvVaw3vYk678LtmDz7gbHCvDeM0)
<!-- ^^  COMPLETE   ^^ -->
