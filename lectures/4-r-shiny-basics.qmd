---
title: R Shiny Basics
author: Alissa Gordon
format:
  revealjs:
    smaller: true
    scrollable: false
    html-math-method: mathjax
error: true
echo: true
---

```{r include=FALSE}
library(tidyverse)
```

## Learning Goals:

- Know what a Shiny App is and why it is useful
- Be able to differentiate between what goes in the UI versus the server
- Use inputs, outputs, and reactive coding to create your own shiny app



![](https://www.worldbank.org/content/dam/photos/780x439/2021/apr/Shiny-logo.png){fig-align="center" width=40%}

# What is a shiny app? {data-background-color=black}

## Shiny
Shiny is an R package that allows us to build and share interactive web applications through R.
If you do not already have it, go ahead and install the following packages:

```{r, eval=FALSE}
install.packages('shiny')
install.packages('shinyWidgets')
```


[![Shiny app example: click to explore](4-r-shiny-basics-figures/shinyscreenshot.png){fig-align="center" width=80%}](https://alissagordon.shinyapps.io/PHAR_synthetic_data_explorer/){target="_blank"}


# Why are shiny apps useful? {data-background-color=navy}

## They are useful because...

- We can make complex apps without knowledge of languages such as HTML and JavaScript
- We can share them easily as R files for local implementation or as URLs
- They are open source (affordable and accessible)!
- They allow for interactive and quick data exploration

# What is the basic structure of a shiny app? {data-background-color=teal}

## Shiny structure

- Shiny apps consist of two key components, both coded in R!
- These components are the User Interface (aka UI) and the Server
- These two work together, communicating through inputs and outputs, to create the shiny app 

![](https://media.geeksforgeeks.org/wp-content/uploads/20221211154233/Screenshot-(238).png){fig-align="center"}


## The UI and Server

- The UI is the front-end of a Shiny app, where users interact with various input elements (like sliders, buttons, text fields, and dropdowns). It defines what the app looks like and how users provide their preferences or data.
- These preferences are processed by the server. The server performs the necessary computations, and generates outputs (such as plots and tables).
- These outputs are then sent back to the UI to be displayed to the users!

:::: {.columns}

::: {.column width="50%}

![](4-r-shiny-basics-figures/user.png){width=70% style="display: block; margin-left: auto; margin-right: auto;"}

:::

::: {.column width="50%"}
<br>
![](4-r-shiny-basics-figures/serverr.png){style="display: block; margin-left: auto; margin-right: auto;"}
:::
::::



## The Restaurant Analogy: The UI

- In the grand scheme of the shiny app, you can think of the shiny app as a restaurant. 
- The user of the shiny app is the restaurant customer, and the UI is the table where the customer sits at! You can also think of the user inputs as a dinner menu at the restaurant, giving the customer different options for their food.

![](4-r-shiny-basics-figures/customer.webp){fig-align="center"}




## The Restaurant Analogy: The Server
- The customer's orders are then taken back to the kitchen. We can think of the kitchen and staff as our shiny server. You can think of the meal as the output from the shiny app. The kitchen makes the customer's meal based on their order.

![](4-r-shiny-basics-figures/kitchen.webp){fig-align="center"}


## The Restaurant Analogy: Back to the UI!
- Once the meal is created, it is brought back to the customer's table for the customer to enjoy!
- For the restaurant to be successful, we want to ensure proper communication between the customer and the kitchen so that the customer gets what they want!

![](4-r-shiny-basics-figures/happycustomer.webp){fig-align="center"}



## Summary

- The UI and the server worker closely together to create the shiny app.
- The shiny app works like a restaurant. If the customers' orders are not properly communicated to the kitchen, we will have wrong orders and unhappy customers!

![](4-r-shiny-basics-figures/interactions.png){fig-align="center"}

## Learning Check {data-background-color=teal}

1. Why are shiny apps useful?
<br>
<br>
2. What are the two main components of a shiny app, and what do they do?
<br>
<br>
3. Fill in the blanks: The inputs are selected in the _____ by the app users. The outputs are then created in the ________ and later shown back in the _________.


# How do we work with inputs and outputs? {data-background-color=green}

## Inputs

- Inputs are displayed on the UI for users to choose different options for their analysis.
- With inputs, we can select variables, filter data, change plot types, and more!
- Luckily, we have 'widgets' that are easy functions to create inputs through shinyWidgets and other similar packages.
- When you list inputs in the UI, be sure to separate them with commas

[![](4-r-shiny-basics-figures/widgets.png){fig-align="center" width=80%}](https://shiny.posit.co/r/gallery/widgets/widget-gallery/){target="_blank"}


## Input Structure

The basic structure of input functions are similar to each other.

- The key to using inputs is to properly ID them so we can call them throughout our server code. We call them with 'input$inputId' in our code.

![](4-r-shiny-basics-figures/inputexample.png){width=80%}

##  Outputs

- Outputs are created in the server portion of our code. Outputs can be a range of objects including but not limited to tables, graphs, and text.
- Whenever we create output in the server, we use 'render' code. We can think of rendering an object as preparing it to be used as an output. In our restaurant analogy, this equates to cooking our ingredients in the kitchen to create the meal.
- Show tables 

## Output Structure
The basic structure when rendering outputs are also similar to one another.
- The key to using outputs is to properly ID them so we can call them later back to our UI. We call them with 'output$outputID' in our code.
- We also want to make sure that we are using the correct render function based on our desired output.
![](4-r-shiny-basics-figures/inputexample.png){width=80%}

## Calling our outputs
We can call our outputs back to our UI using their output IDs. Specifically, we have code that allows us to call outputs based on their output type.

- Table here

## A note on the reactive function
You will see code later that uses the reactive function in the server. The main thing about the reactive function is that it allows us to streamline our computations. In our case, we will use it to change the data throughout the server that we work with based on the input values. This saves computation time as we will not have to reactively change the data in every render function.

## Exercises: Labeling our inputs and outputs! {data-background-color=teal}

1. What does this following code do? Address what all the arguments do in the UI.
Have some input code.

2. Suppose we want to create a plot. How do we set this up in the server, and how do we call it in the UI? (Hint: make sure to address which output and render functions and also properly use IDs)

# How do we deploy our apps? {data-background-color=blue}

## Local versus Hosted
One of the great things about shiny apps is that we can deploy them locally (on our own computers) or host them online (with URLs anyone can access). Deploying them locally doesn't necessarily mean no one else can access them since we can share the code for people to also locally deploy the shiny app. For now we will focus on local deployment.

- We can locally deploy the app just by running the shinyApp function after defining the UI and the server!
- This will pop up a separate window with your functional shiny app
- If there are any errors in the UI or server code, your app will not run or will not run as expected

```{r, eval=FALSE}
ui<-fluidPage(
  
)

server<-function(input, output){
  
}

shinyApp(ui = ui, server = server)
```


# Demo time! {data-background-color=pink}

# Project time! {data-background-color=red}

