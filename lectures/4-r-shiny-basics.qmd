---
title: R Shiny Basics
author: Alissa Gordon
format:
  revealjs:
    smaller: true
    scrollable: false
    html-math-method: mathjax
error: true
echo: true
---

```{r include=FALSE}
library(tidyverse)
```

## Learning Goals:

- Know what a Shiny App is and why it is useful
- Be able to differentiate between what goes in the UI versus the server
- Use inputs, outputs, and reactive coding to create your own shiny app



![](https://www.worldbank.org/content/dam/photos/780x439/2021/apr/Shiny-logo.png){fig-align="center" width=40%}

# What is a shiny app? {data-background-color=black}

## Shiny
Shiny is an R package that allows us to build and share interactive web applications through R.
If you do not already have it, go ahead and install the following packages:

```{r, eval=FALSE}
install.packages('shiny')
install.packages('shinyWidgets')
```


![](../4-r-shiny-basics-figures/shinyscreenshot.png){width=80%}

[Shiny Example](https://alissagordon.shinyapps.io/PHAR_synthetic_data_explorer/){target="_blank"}


# Why are shiny apps useful? {data-background-color=navy}

## They are useful because...

- We can make complex apps without knowledge of languages such as HTML and JavaScript
- We can share them easily through URLs or as R files for local implementation
- They are open source (affordable and accessible)!
- They allow for interactive and quick data exploration

# What is the basic structure of a shiny app? {data-background-color=teal}

## Shiny structure

- Shiny apps consist of two key components, both coded in R!
- These components are the User Interface (aka UI) and the Server
- These two work together to create the shiny app through a series of inputs and outputs

![](https://media.geeksforgeeks.org/wp-content/uploads/20221211154233/Screenshot-(238).png)


## The UI

- The UI is what the users of shiny app see and interact with
- In the grand scheme of the shiny app, you can think of the shiny app is a restaurant. The user of the shiny app is the restaurant customer, and the UI is the table where the customer sits at! The UI will have input options, like a dinner menu, where users can put in 'orders' for how they want to analyze their data. 
- Once the output is created in the server, it is shown on the UI. In terms of our analogy, once the order is created, it is brought back to the table for the customer to enjoy!
- Be mindful of separating functions in the UI with commas (will revisit at demo)

:::: {.columns}

::: {.column width="70%}
![](https://psyteachr.github.io/shiny-tutorials/images/01-first-app/05-app-interface.png)
:::

::: {.column width="30%"}
![](https://www.shutterstock.com/image-vector/reserved-modern-restaurant-table-tablecloth-candles-754757053)
:::
::::



## The Server

- The server is what happens behind the scenes in our shiny app! Most of the actual work goes on here. This typically includes calculations, simulations, data manipulation, and plotting.
- In terms of the restaurant, the server is the kitchen! It takes the orders from the customer and creates the desired output! This output is then relayed back to the UI for the user.


:::: {.columns}

::: {.column width="70%}
![server pic](https://psyteachr.github.io/shiny-tutorials/images/01-first-app/05-app-interface.png)
:::

::: {.column width="30%"}
![kitchen pic](https://www.shutterstock.com/image-vector/reserved-modern-restaurant-table-tablecloth-candles-754757053)
:::
::::


## Summary

- The UI and the server worker closely together to create our shiny app.
- Users interact with the UI where they can toggle inputs to choose how they want to interact with their data. These inputs are relayed to the server where the output is created in accordance with the chosen inputs. These outputs are then sent back to the UI for users to see.
- The shiny app works like a restaurant in which there are interactions between the customers (the users) and the staff. The UI is the dinner table where the users can order and customize their meals and later enjoy their meals. The server is the kitchen and the restaurant staff that create the customer's meals! If there is bad communication between the customers and the staff, the correct meal will not be made!

![interaction pic](https://www.shutterstock.com/image-vector/reserved-modern-restaurant-table-tablecloth-candles-754757053)

## Learning Check {data-background-color=teal}

1. What are some good qualities of a shiny app?

2. What are the two main components of a shiny app, and what do they do?

3. Fill in the blanks: The inputs are selected in the _____ by the app users. The outputs are then created in the ________ and later shown back in the _________.


# How do we work with inputs and outputs? {data-background-color=green}

## Inputs

- Shiny inputs are displayed on the UI for users to choose different options for their analysis.
- With inputs, we can select variables, filter data, change plot types, and more!
- Luckily, we have 'widgets' that are easy functions to implement to use as inputs through shinyWidgets and other similar packages.
- When you list inputs, be sure to separate them with commas

![Widget examples](https://www.shutterstock.com/image-vector/reserved-modern-restaurant-table-tablecloth-candles-754757053)

[Shiny Widget Gallery](https://shiny.posit.co/r/gallery/widgets/widget-gallery/){target="_blank"}


## Input Structure

The basic structure of input functions are similar to each other.

- The key to using inputs is to properly ID them so we can call them throughout our server code. We call them with 'input$inputId' in our code.

![](../4-r-shiny-basics-figures/inputexample.png){width=80%}

##  Outputs

- Outputs are created in the server portion of our code. Outputs can be a range of objects including but not limited to tables, graphs, and text.
- Whenever we create output in the server, we use 'render' code. We can think of rendering an object as preparing it to be used as an output. In our restaurant analogy, this equates to cooking our ingredients in the kitchen to create the meal.
- Show tables 

## Output Structure
The basic structure when rendering outputs are also similar to one another.
- The key to using outputs is to properly ID them so we can call them later back to our UI. We call them with 'output$outputID' in our code.
- We also want to make sure that we are using the correct render function based on our desired output.
![](../4-r-shiny-basics-figures/inputexample.png){width=80%}

## Calling our outputs
We can call our outputs back to our UI using their output IDs. Specifically, we have code that allows us to call outputs based on their output type.

- Table here

## A note on the reactive function
You will see code later that uses the reactive function in the server. The main thing about the reactive function is that it allows us to streamline our computations. In our case, we will use it to change the data throughout the server that we work with based on the input values. This saves computation time as we will not have to reactively change the data in every render function.

## Exercises: Labeling our inputs and outputs! {data-background-color=teal}

1. What does this following code do? Address what all the arguments do in the UI.
Have some input code.

2. Suppose we want to create a plot. How do we set this up in the server, and how do we call it in the UI? (Hint: make sure to address which output and render functions and also properly use IDs)

# How do we deploy our apps? {data-background-color=blue}

## Local versus Hosted
One of the great things about shiny apps is that we can deploy them locally (on our own computers) or host them online (with URLs anyone can access). Deploying them locally doesn't necessarily mean no one else can access them since we can share the code for people to also locally deploy the shiny app. For now we will focus on local deployment.

- We can locally deploy the app just by running the shinyApp function after defining the UI and the server!
- This will pop up a separate window with your functional shiny app
- If there are any errors in the UI or server code, your app will not run or will not run as expected

```{r, eval=FALSE}
ui<-fluidPage(
  
)

server<-function(input, output){
  
}

shinyApp(ui = ui, server = server)
```


# Demo time! {data-background-color=pink}

# Project time! {data-background-color=red}

