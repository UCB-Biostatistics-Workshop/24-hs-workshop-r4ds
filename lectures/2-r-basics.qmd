---
title: R Programming
author: Alejandro Schuler, Yutine Wu
format:
  revealjs:
    smaller: true
    scrollable: false
    html-math-method: mathjax
error: true
echo: true
---

## Learning Goals:

- save values to variables
- find and call R functions with multiple arguments by position and name
- recognize and index vectors and lists
- recognize, import, and inspect data frames
- issue commands to R using the Rstudio script pane

## Programming Basics
- We've seen code like
```{r, echo=F, message=F, warning=F}
library(tidyverse)
```
```{r, eval=F}
sleep = read_csv("https://bit.ly/ucb_biostat_data")
```
```{r, include=F}
sleep = read_csv("https://bit.ly/ucb_biostat_data")
```

- We know this reads a .csv from a file and creates something called a "data frame" 
- We've been using this data frame in code like
```{r, eval=F}
ggplot(sleep) + 
  geom_bar(aes(x = bmi_category, fill = gender))
```

- But what does this syntax really mean? Is it useful outside of making plots?

# Assignment {data-background-color=black}

## Assignment

- To do complex computations, we need to be able to give
names to things.
```{r, eval=F}
sleep = read_csv("https://bit.ly/ucb_biostat_data")
```

- This code *assigns* the result of running `read_csv("https://bit.ly/ucb_biostat_data")` to the name `sleep`
- You can do this with any values and/or functions

:::: {.columns}
:::{.column}
```{r}
x = 1
```

- R prints no result from this assignment, but what you entered
causes a side effect: R has stored the association between
x and the result of this expression (look at the Environment pane.)
:::
:::{.column}
![](https://github.com/alejandroschuler/r4ds-courses/blob/summer-2023/figures/x_gets_1.png?raw=true)
:::
::::

## Variables

```{r}
x
x / 5
```
- When R sees the name of a variable, it uses the stored value of
that variable in the calculation.
- We can break complex calculations into named parts. This is a
simple, but very useful kind of abstraction.

![](https://github.com/alejandroschuler/r4ds-courses/blob/summer-2023/figures/x_is_1.jpg?raw=true)

## Two ways to assign

In R, there are (unfortunately) two assignment operators. They have
subtly different meanings (more details later).

- `<-` requires that you type two characters but better captures spirit of assignmnet
- `=` is easier to type but incorrectly suggests mathematical equality
- You will see both used throughout R and user code.

```{r}
x <- 10
x
x = 20
x
```

## Assignment has no undo
```{r}
x = 10
x
x = x + 1
x
```

- If you assign to a name with an existing value, that value is overwritten.
- There is no way to undo an assignment, so be careful in reusing variable names.

## Naming variables
- It is important to pick meaningful variable names.
- Names can be too short, so don't use `x` and `y` everywhere.
- Names can be too long (`Main.database.first.object.header.length`).
- Avoid silly names.
- Pick names that will make sense to someone else (including the
person you will be in six months).
- ADVANCED: See `?make.names` for the complete rules on
what can be a name.

***
There are different conventions for constructing compound names. Warning:
disputes over the right way to do this can get heated.
```{r, prompt=FALSE,eval=FALSE,tidy=FALSE}
stringlength 
string.length
StringLength
stringLength
string_length (underbar)
string-length (hyphen)
```

- To be consistent with the packages we will use, I recommend snake_case where you separate lowercase words with _
- Note that R itself uses several of these conventions.
- One of these won't work. Which one and why?

***
```{r, eval=F}
a = 1
A # this causes an error because A does not have a value
```
```
Error: object 'A' not found
```
- R cares about upper and lower case in names.
- names can't start with numbers

```{r eval=FALSE}
for = 7 # this causes an error
```

- `for` is a reserved word in R. (It is used in loop control.)
- ADVANCED: see `?Reserved` for the complete rules.

## Exercise: birth year {data-background-color=teal}

- Make a variable that represents the age you will be at the end of this year
- Make a variable that represents the current year
- Use them to compute the year of your birth and save that as a variable
- Print the value of that variable

## Assignment and Reference
```{r}
x = 2
y = x
y
x = 1
y
```

- What do you observe?

***
```{r}
x = 2
y = x
y
x = 1
y
```

::::{.columns}
:::{.column}
![](https://github.com/alejandroschuler/r4ds-courses/blob/summer-2023/figures/y_gets_x.png?raw=true)
:::
:::{.column}
![](https://github.com/alejandroschuler/r4ds-courses/blob/summer-2023/figures/x_changes.png?raw=true)
:::
::::


# Functions {data-background-color=black}

## Calling functions
- To call a function, type the function name, then the argument or
arguments in parentheses. (Use a comma to separate the arguments, if
                           more than one.)
```{r}
sqrt(2)
```


## Arguments

- Functions transform inputs to outputs
- internally, however, they have an environment just like the one you see in your workspace
- when you call a function, you tell it how to connect the variables in your environment to the ones it expects to have so that it can do its job
- the names the function calls these inputs inside itself will be different than what you call them on the outside

```
aes(x=sleep_duration, y=quality_of_sleep)
```
![](https://github.com/UCB-Biostatistics-Workshop/f24/blob/02533f16a99cabf4ab5c19efbacc92351a630ad3/figures/call.png?raw=true)

## Named and positional arguments

::::{.columns}
:::{.column}

- Arguments can be supplied **by name** using the syntax
variable `=` value.
- you can see the names of the arguments in the help page for each function
- When using names, the order of the named arguments
does not matter.
```{r, tidy=F}
ggplot(data=sleep) + 
  geom_point(mapping=aes(y=sleep_duration, 
                         x=quality_of_sleep))
```

:::
:::{.column}

- If you leave the names off, R defaults to a **positional** order that is specific to each function (e.g. for `aes()`, `x` comes first, then `y`)
- you can see the default order of the arguments in the help page for each function
```{r, tidy=F} 
ggplot(sleep) + 
  geom_point(aes(quality_of_sleep, 
                 sleep_duration))
```

:::
::::

## Optional arguments
- Many R functions have arguments that you don't always have to specify. For example:
```{r setup, eval=FALSE}
file_name = "https://bit.ly/ucb_biostat_data"
sleep_10 = read_csv(file_name, n_max=10) # only read in 10 rows
sleep = read_csv(file_name) 
```
- `n_max` tells `read_csv()` to only read the first 10 rows of the dataset. 
- If you don't specify it, it defaults to infinity (i.e. R reads until there are no more lines in the file).

## Exercise [together] {data-background-color=teal}

Why does this code generate errors?

```{r, tidy=F}
ggplot(the_data=sleep) + 
  geom_point(mapping=aes(y_axis=sleep_duration,
                         x_axis=quality_of_sleep))
```

## Exercise [together] {data-background-color=teal}

::::{.columns}
:::{.column}
I'm trying to generate this plot:

```{r, echo=F, tidy=F}
ggplot(data=sleep) + 
  geom_point(aes(quality_of_sleep, 
                 sleep_duration))
```
:::
:::{.column}
But when I use this code, I get:

```{r, tidy=F}
ggplot(data=sleep) + 
  geom_point(aes(sleep_duration, 
                 quality_of_sleep))
```

What am I doing wrong?
:::
::::

## Functions, assignment, and reference
```{r}
x = 2
x^2
x
```

- What do you observe?

***
```{r}
x = 2
x^2
x
```

![](https://github.com/alejandroschuler/r4ds-courses/blob/summer-2023/figures/x_squared.png?raw=true)

- functions generally do not affect the variables you pass to them (`x` remains the same after `sqrt(x)`)

# Vectors {data-background-color=black}

## Repetitive calculations
```{r}
x1 = 1
x2 = 2
x3 = 3
```

Let's say I have these variables and I want to add 1 to all of them and save the result.

```{r}
y1 = 1 + x1
y2 = 1 + x2
y3 = 1 + x3
```

This does the trick but it's a lot of copy-paste

## Vectors

- Vectors solve the problem
```{r}
x = c(1,2,3)
y = x + 1
y
```

- A vector is a one-dimensional sequence of zero or more values
- Vectors are created by wrapping the values separated by commas with the `c(` `)` function, which is short for "combine"
- Many R functions and operators (like `+`) automatically work with
multi-element vector arguments.

## Elementwise operations

- This multiplies each element of `c(1,2,3)` by the corresponding element of `c(4,5,6)`
```{r}
c(1,2,3) * c(4,5,6)
```

- Many basic R functions operate on multi-element vectors as
easily as on vectors containing a single number.
```{r}
sqrt(c(1,2,3))
c(1,2,3)^3
log(c(1,2,3))
```

## Summaries

- some R functions take vectors as arguments and summarize them instead of applying elementwise
```{r}
numbers <- c(9, 12, 6, 10, 10, 16, 8, 4)
numbers
sum(numbers)
sum(numbers)/length(numbers)
mean(numbers)
```


## Exercise: subtract the mean {data-background-color=teal}

A particular class has two quizzes which are taken by the same three students. Thier scores are below:
```{r}
quiz_1_scores = c(70, 90, 55)
quiz_2_scores = c(76, 88, 70)
```

- Write code to see if the quiz 1 average is higher than or lower than the quiz 2 average
- Are students improving? Subtract the quiz 1 scores from the quiz 2 scores and take the average of the resulting differences to find out.


## Exercise: a vector of variables [together]  {data-background-color=teal}

- Predict the output of the following code:
```{r, eval=F}
a = 1
b = 2
x = c(a,b)

a = 3
print(x)
```

## Ranges
```{r}
1:50
```

- The colon `:` is a handy shortcut to create a vector that is
a sequence of integers from the first number to the second number
(inclusive).
- Ranges can go the other way too and include negative numbers, e.g. `5:-5`
- Long vectors wrap around. (Your screen may have a different width than what is shown here.)

## Indexing

```{r}
x = c("a", "b", "c", "d")
x[1] # same as x[c(1)] since 1 is already a vector (of length 1)
x[2:4]
x[c(3, 1)]
x[c(1,1,1,1,1,1,4)]
```

- Indexing returns a subsequence of the vector. It does not change
the original vector. Assign the result to a new variable to save it if you neeed it later.
- R starts counting vector indices from 1.
- You can index using a multi-element index vector.
- You can repeat index positions

## Exercise: reading vector code {data-background-color=teal}

What does this code do?
```{r, eval=F}
x = c("a", "b", "c", "d", "e") # some vector
x[length(x):1]
```

- read inside out: first figure out what `length(x)` does, then think about what the output of `length(x):1` should do, and then finally `x[length(x):1]`

## Indexed Assignment

- you can assign _into_ an indexed position

```{r}
x
x[1] = 'Z'
x
```

- or multiple

```{r}
x
x[c(1,2)] = c("Z", "X")
x
x[c(1,2)] = "Q"
x
```


# Data Frames {data-background-color=black}

## Making data frames
- use `tibble()` to make your own data frames from scratch in R
```{r, tidy=F}
my_data = tibble(
  person = c("carlos", "nathalie", "christina", "alejandro"),
  age = c(33, 48, 8, 29)
)
my_data
```

## Data frame properties
- `dim()` gives the dimensions of the data frame. `ncol()` and `nrow()` give you the number of columns and the number of rows, respectively.
```{r}
dim(my_data)
ncol(my_data)
nrow(my_data)
```

- `names()` gives you the names of the columns (a vector)
```{r}
names(my_data)
```

***
- `glimpse()` shows you a lot of information, `head()` returns the first `n` rows
```{r}
glimpse(my_data)

head(my_data, n=2)
```

## Writing data frames
```{r, eval=F}
write_csv(my_data, "~/Desktop/my_data.csv")
```
- after running this, you'll see a new file called `my_data.csv` (or whatever you chose to name it) appear in the specified location on your computer (e.g. `Desktop`)
- you can read and write `.csv` files in lots of programs (e.g. google sheets)
- to read and write other formats look at documentation and use google + chatGPT!

# Scripts  {data-background-color=black}

## Using the script pane

::::{.columns}
:::{.column}
- Writing a series of expressions in the console rapidly gets
messy and confusing.
- The console window gets reset when you restart RStudio.
- It is better (and easier) to write expressions and functions
in the script pane (upper left), building up your analysis.
- There, you can enter expressions, evaluate them, and save the
contents to a .R file for later use.
- Look at the RStudio ``Code'' menu for some useful keyboard
commands.
:::
:::{.column}
- Create a script pane: File > New File > R Script
- Put your cursor in the script pane.
- Type: `1:10^2`
- Then hit `Command-RETURN` (Mac), or `Ctrl-ENTER` (Windows).
- That line is copied to the console pane and evaluated.
- You can save the script to a file.
- Explore the RStudio Code menu for other commands.
:::
::::

## Comments
```{r}
## In this section, we make a vector and reverse its order
x = 1:3 * 10                # make a vector [10, 20 ... ]
x_reversed = x[length(x):1] # reverse its order
```
- Use a `#` to start a comment.
- A comment extends to the end of the
line and is ignored by R.
- comments are complemented by good code style!


## RStudio Pro-tip: scrolling and multicursors

- You should also be aware of `cmd-<arrow>` and `alt-<arrow>` for moving the cursor (by line and by word)
- and `cmd-shift-<arrow>` and `alt-shift-<arrow>` for selecting text (by line and by word)
- these also combo with shift (to select) and delete
- RStudio's script pane supports multi-cursors! Hold `alt` and drag your mouse up and down 
- You can also set a keyboard shortcut for `find and add next`
- These features make it much easier to rename variables, etc.

## Exercise: Plotting a parabola  {data-background-color=teal}
::: {style="font-size: 85%;"}

::::{.columns}
:::{.column}

Write an R script that starts with:

```{r}
A = 1
B = 2
C = 3
```

In the rest of the script, do the following:

- generate an evenly-spaced sequence of 100 values between -5 and 5 (find an R function that does this). Call this `x`
- generate the corresponding vector of y-values `y` by computing the formula $y = Ax^2 + Bx + C$ elementwise
- create a data frame with `x` and `y` as columns
- use ggplot to create a line plot of `x` vs `y`

Run your script to see the generated plot. Try changing the values of `A`, `B`, and `C` at the top of the script and re-running to see how the plot changes.
:::
:::{.column}

Your result should look like:

```{r, echo=F}
x = seq(-5, 5, length.out=100)
y = A*x^2 + B*x + C
df = tibble(x=x, y=y)
ggplot(df) + geom_line(aes(x,y))
```

:::
::::